<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/"><title>JBoss Tools Aggregated Feed</title><link rel="alternate" href="http://tools.jboss.org" /><subtitle>JBoss Tools Aggregated Feed</subtitle><dc:creator>JBoss Tools</dc:creator><entry><title>How to generate code using Fabric8 Kubernetes Client</title><link rel="alternate" href="https://developers.redhat.com/articles/2023/01/24/how-generate-code-using-fabric8-kubernetes-client" /><author><name>Rohan Kumar</name></author><id>a977e7ef-34bd-42f9-b316-f52ae8f20006</id><updated>2023-01-24T17:00:00Z</updated><published>2023-01-24T17:00:00Z</published><summary type="html">&lt;p&gt;&lt;a href="https://github.com/fabric8io/kubernetes-client"&gt;Fabric8 Kubernetes Client&lt;/a&gt; provides two ways of interacting with &lt;a href="https://kubernetes.io/docs/concepts/extend-kubernetes/api-extension/custom-resources/"&gt;CustomResources&lt;/a&gt; running in any &lt;a href="https://kubernetes.io/"&gt;Kubernetes&lt;/a&gt; cluster:&lt;/p&gt; &lt;ul&gt;&lt;li&gt;Typed API (covered in &lt;a href="https://developers.redhat.com/articles/2023/01/04/programming-kubernetes-custom-resources-java"&gt;Part 2&lt;/a&gt;)&lt;/li&gt; &lt;li&gt;Typeless API (covered in &lt;a href="https://developers.redhat.com/articles/2023/01/05/how-use-fabric8-kubernetes-client#"&gt;Part 3&lt;/a&gt;)&lt;/li&gt; &lt;/ul&gt;&lt;p&gt;While typeless API provides a way to deal with CustomResources generically, it’s not always a preferable option for a strongly typed language like Java. Most developers want to use typed API to have complete and type-safe control over their CustomResources.&lt;/p&gt; &lt;p&gt;However, there is one additional step involved in using typed API. It provides POJOs for Kubernetes CustomResource objects. This article showcases how you can automatically generate CustomResourceDefinition-related code using tools offered by the &lt;a href="https://github.com/fabric8io/kubernetes-client"&gt;Fabric8 Kubernetes Client&lt;/a&gt; library.&lt;/p&gt; &lt;p&gt;This is the fourth installment in the following series of articles:&lt;/p&gt; &lt;ul&gt;&lt;li&gt;Part 1: &lt;a href="https://developers.redhat.com/articles/2023/01/04/how-use-fabric8-java-client-kubernetes"&gt;How to use Fabric8 Java Client with Kubernetes&lt;/a&gt;&lt;/li&gt; &lt;li&gt;Part 2: &lt;a href="https://developers.redhat.com/articles/2023/01/04/programming-kubernetes-custom-resources-java"&gt;Programming Kubernetes custom resources in Java&lt;/a&gt;&lt;/li&gt; &lt;li&gt;Part 3: &lt;a href="https://developers.redhat.com/articles/2023/01/05/how-use-fabric8-kubernetes-client#"&gt;How to use Kubernetes dynamic client with Fabric8&lt;/a&gt;&lt;/li&gt; &lt;li&gt;Part 4: How to generate code using Fabric8 Kubernetes Client&lt;/li&gt; &lt;li&gt;Part 5: &lt;a href="https://developers.redhat.com/articles/2023/01/24/how-write-tests-fabric8-kubernetes-client"&gt;How to write tests with Fabric8 Kubernetes Client&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt;&lt;h2&gt;2 CRD generation options&lt;/h2&gt; &lt;p&gt;There are two possible approaches to generating code while using custom resources:&lt;/p&gt; &lt;ol&gt;&lt;li&gt;Users coming from a Java background would have more confidence in writing Java classes than in writing CRD YAML, which is error-prone. They would prefer to generate CRD Yaml from the Java POJO they wrote.&lt;/li&gt; &lt;li&gt;It is also possible that there is an existing CRD YAML file for which you can generate Java POJOs.&lt;/li&gt; &lt;/ol&gt;&lt;p&gt;Fabric8 Kubernetes Client provides tooling for both of these approaches via &lt;a href="https://github.com/fabric8io/kubernetes-client/blob/master/doc/CRD-generator.md"&gt;CRD Generator&lt;/a&gt; and &lt;a href="https://github.com/fabric8io/kubernetes-client/blob/master/doc/java-generation-from-CRD.md"&gt;Java Generator&lt;/a&gt;. &lt;/p&gt; &lt;p&gt;Let’s take an example of the Book CustomResource we used in part 2, &lt;a href="https://developers.redhat.com/articles/2023/01/04/programming-kubernetes-custom-resources-java"&gt;Programming Kubernetes custom resources in Java&lt;/a&gt;, to see both approaches to generating Java POJOs from CRD YAML and vice versa.&lt;/p&gt; &lt;h2&gt;Generating CRD POJOs from CRD YAML&lt;/h2&gt; &lt;p&gt;Consider a scenario with only CRD YAML manifest for the Book CustomResource. We want to automatically generate Java POJOs for Book CustomResource. We’ll be using &lt;a href="https://github.com/fabric8io/kubernetes-client/blob/master/doc/java-generation-from-CRD.md"&gt;Fabric8 Java Generator&lt;/a&gt; to do this. We’ll be using its &lt;a href="https://search.maven.org/artifact/io.fabric8/java-generator-maven-plugin/6.3.1/maven-plugin"&gt;Java Generator Maven Plugin&lt;/a&gt; to generate Java POJOs from YAML during build time.&lt;/p&gt; &lt;p&gt;Let’s start with a basic maven project and place our Book CustomResource YAML in our project’s resources folder. If you don’t have an existing project, you can clone this &lt;a href="https://github.com/rohanKanojia/kubernetes-client-demo/tree/master/fabric8-crd-java-generator-demo"&gt;GitHub repository&lt;/a&gt;:&lt;/p&gt; &lt;pre&gt; &lt;code class="language-bash"&gt;fabric8-crd-java-generator-demo : $ tree src/main/resources/ src/main/resources/ └── crd └── book-crd.yaml &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;In our project’s &lt;code&gt;pom.xml&lt;/code&gt; let’s add Fabric8 Java Generator Maven Plugin configuration to generate Java POJOs for CRD YAML present in &lt;code&gt;src/main/resources&lt;/code&gt; folder:&lt;/p&gt; &lt;pre&gt; &lt;code class="language-xml"&gt;&lt;plugin&gt; &lt;groupId&gt;io.fabric8&lt;/groupId&gt; &lt;artifactId&gt;java-generator-maven-plugin&lt;/artifactId&gt; &lt;version&gt;${fabric8.version}&lt;/version&gt; &lt;configuration&gt; &lt;!-- 1 --&gt; &lt;source&gt;${project.basedir}/src/main/resources/crd/book-crd.yaml&lt;/source&gt; &lt;!-- 2 --&gt; &lt;extraAnnotations&gt;true&lt;/extraAnnotations&gt; &lt;/configuration&gt; &lt;executions&gt; &lt;execution&gt; &lt;goals&gt; &lt;goal&gt;generate&lt;/goal&gt; &lt;/goals&gt; &lt;/execution&gt; &lt;/executions&gt; &lt;/plugin&gt; &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;By providing this plugin configuration, we’re instructing Java Generator Maven Plugin to do the following:&lt;/p&gt; &lt;ul&gt;&lt;li&gt;Pick &lt;code&gt;book-crd.yaml&lt;/code&gt; file as a source file for generating CustomResource POJOs.&lt;/li&gt; &lt;li&gt;Add extra annotations to generated classes that can be processed by &lt;a href="https://github.com/sundrio/sundrio"&gt;Sundrio&lt;/a&gt; to add additional helper builders and fluent classes. This would also require &lt;a href="https://search.maven.org/artifact/io.sundr/builder-annotations/0.93.2/jar"&gt;Sundrio&lt;/a&gt; and &lt;a href="https://search.maven.org/artifact/org.projectlombok/lombok/1.18.24/jar"&gt;lombok&lt;/a&gt; dependencies added to the project.&lt;/li&gt; &lt;/ul&gt;&lt;p&gt;Compile the project as follows:&lt;/p&gt; &lt;pre&gt; &lt;code class="language-bash"&gt;fabric8-crd-java-generator-demo : $ mvn clean install&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Upon running &lt;code&gt;mvn clean install&lt;/code&gt;, you can see that Book CustomResource POJOs are automatically generated in&lt;code&gt;target/generated-sources/java/&lt;/code&gt;. This is the default location of generated sources. If you want to generate these POJOs in some other directory, you can provide &lt;code&gt;target &lt;/code&gt;in Java Generator Maven Plugin configuration section or via &lt;code&gt;fabric8.java-generator.target &lt;/code&gt;property.&lt;/p&gt; &lt;p&gt;Java Generator Maven Plugin also automatically adds these generated classes to maven source paths. So you don’t have to worry about adding extra configuration to add these generated classes to the maven source path.&lt;/p&gt; &lt;p&gt;There are also some helper classes generated in &lt;code&gt;target/generated-sources/java/&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt; &lt;code class="language-bash"&gt;fabric8-crd-java-generator-demo : $ tree target/generated-sources/java/ target/generated-sources/java/ └── io └── fabric8 └── demo └── generator └── v1alpha1 ├── Book.java ├── BookSpec.java └── BookStatus.java 5 directories, 3 files fabric8-crd-java-generator-demo : $ tree target/generated-sources/annotations/ target/generated-sources/annotations/ └── io └── fabric8 └── demo └── generator └── v1alpha1 ├── BookBuilder.java ├── BookFluentImpl.java ├── BookFluent.java ├── BookSpecBuilder.java ├── BookSpecFluentImpl.java ├── BookSpecFluent.java ├── BookStatusBuilder.java ├── BookStatusFluentImpl.java └── BookStatusFluent.java 5 directories, 9 files &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;You can go ahead and start writing code based on these generated Book POJOs. Java Generator Maven Plugin allows various configuration options to configure source generation. You can take a look here at the &lt;a href="https://github.com/fabric8io/kubernetes-client/blob/master/java-generator/maven-plugin/src/main/java/io/fabric8/java/generator/maven/plugin/JavaGeneratorMojo.java#L42"&gt;source code&lt;/a&gt; or &lt;a href="https://github.com/fabric8io/kubernetes-client/blob/master/doc/java-generation-from-CRD.md"&gt;documentation&lt;/a&gt; for more details.&lt;/p&gt; &lt;p&gt;You can find the source code for this in this &lt;a href="https://github.com/rohanKanojia/kubernetes-client-demo/tree/master/fabric8-crd-java-generator-demo"&gt;GitHub repository&lt;/a&gt;.&lt;/p&gt; &lt;h2&gt;Generating CRD Yaml from POJOs&lt;/h2&gt; &lt;p&gt;Now let’s take a look at the opposite scenario. We already have Java sources for the Book CustomResource but we want to generate CustomResourceDefinition YAML manifests.&lt;/p&gt; &lt;p&gt;We have our POJOs in &lt;code&gt;src/main/java &lt;/code&gt; folder as usual (see &lt;a href="https://github.com/rohanKanojia/kubernetes-client-demo/tree/master/fabric8-java-crd-yaml-generator-demo"&gt;GitHub repository&lt;/a&gt; for source code).&lt;/p&gt; &lt;pre&gt; &lt;code class="language-bash"&gt;fabric8-java-crd-yaml-generator-demo : $ tree src/main/java/ src/main/java/ └── io └── fabric8 └── demo └── crd └── v1alpha1 ├── Book.java ├── BookSpec.java └── BookStatus.java 5 directories, 3 files &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;We’ll be using &lt;a href="https://github.com/fabric8io/kubernetes-client/blob/master/doc/CRD-generator.md"&gt;Fabric8 Crd Generator&lt;/a&gt; to generate CRD Yaml files for Book CustomResource. It’s available as a &lt;a href="https://docs.oracle.com/javase/8/docs/api/javax/annotation/processing/Processor.html"&gt;Java Annotation Processor&lt;/a&gt;, so you can simply add it as a dependency in your project, and you should be good to go.&lt;/p&gt; &lt;p&gt;Add Fabric8 Crd Generator dependency to your &lt;code&gt;pom.xml&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt; &lt;code class="language-xml"&gt;&lt;dependency&gt; &lt;groupId&gt;io.fabric8&lt;/groupId&gt; &lt;artifactId&gt;crd-generator-apt&lt;/artifactId&gt; &lt;version&gt;${fabric8.version}&lt;/version&gt; &lt;/dependency&gt; &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Compile project:&lt;/p&gt; &lt;pre&gt; &lt;code class="language-bash"&gt;fabric8-java-crd-yaml-generator-demo : $ mvn clean install … [INFO] --- maven-compiler-plugin:3.8.1:compile (default-compile) @ fabric8-java-crd-yaml-generator-demo --- [INFO] Changes detected - recompiling the module! [INFO] Compiling 3 source files to /home/rokumar/work/repos/kubernetes-client-demo/fabric8-java-crd-yaml-generator-demo/target/classes [INFO] Generating CRD books.testing.fabric8.io: [INFO] - v1beta1 -&gt; /home/rokumar/work/repos/kubernetes-client-demo/fabric8-java-crd-yaml-generator-demo/target/classes/META-INF/fabric8/books.testing.fabric8.io-v1beta1.yml [INFO] - v1 -&gt; /home/rokumar/work/repos/kubernetes-client-demo/fabric8-java-crd-yaml-generator-demo/target/classes/META-INF/fabric8/books.testing.fabric8.io-v1.yml &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;You will notice that during compilation, the Fabric8 Crd Annotation processor generated CustomResourceDefinition YAML files in &lt;code&gt;target/classes/META-INF/fabric8&lt;/code&gt; folder. It picks up all of the classes in the project, which extend &lt;code&gt;io.fabric8.kubernetes.client.CustomResource&lt;/code&gt; and generate CustomResourceDefinition YAML files for each of them.&lt;/p&gt; &lt;pre&gt; &lt;code class="language-bash"&gt;fabric8-java-crd-yaml-generator-demo : $ ls target/classes/META-INF/fabric8/ books.testing.fabric8.io-v1beta1.yml  books.testing.fabric8.io-v1.yml&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;You will notice that there are two YAML files generated (one with &lt;code&gt;v1&lt;/code&gt; and one with &lt;code&gt;v1beta1&lt;/code&gt; suffix). The &lt;code&gt;v1beta1&lt;/code&gt; is kept for backward compatibility for older Kubernetes Clusters, which only supported &lt;code&gt;apiextensions.k8s.io/v1beta1&lt;/code&gt; CustomResourceDefinitions. For most cases, you would most likely be working with the &lt;code&gt;v1&lt;/code&gt; YAML file.&lt;/p&gt; &lt;p&gt;You can go ahead and inspect the contents of generated CustomResourceDefinition YAML files and use them in your Kubernetes clusters.&lt;/p&gt; &lt;p&gt;For more information about the different configuration options available, check out &lt;a href="https://github.com/fabric8io/kubernetes-client/blob/master/doc/CRD-generator.md"&gt;Fabric8 CRD Generator Documentation&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;You can find code for this example in this &lt;a href="https://github.com/rohanKanojia/kubernetes-client-demo/tree/master/fabric8-java-crd-yaml-generator-demo"&gt;GitHub repository&lt;/a&gt;.&lt;/p&gt; &lt;h2&gt;Learn more about Fabric8 Kubernetes Client&lt;/h2&gt; &lt;p&gt;In this blog post, you learned about the code generation capabilities of Fabric8 Kubernetes Client’s tooling in form of &lt;a href="https://github.com/fabric8io/kubernetes-client/blob/master/doc/java-generation-from-CRD.md"&gt;Java Generator&lt;/a&gt; and &lt;a href="https://github.com/fabric8io/kubernetes-client/blob/master/doc/CRD-generator.md"&gt;CRD Generator&lt;/a&gt;. You can find the code in this &lt;a href="https://github.com/rohanKanojia/kubernetes-client-demo%C2%A0"&gt;GitHub repository&lt;/a&gt;. The next article in my series, &lt;a href="https://developers.redhat.com/articles/2023/01/24/how-write-tests-fabric8-kubernetes-client"&gt;How to write tests with Fabric8 Kubernetes Client&lt;/a&gt;, discusses Fabric8 Kubernetes Client testing libraries, Fabric8 Kubernetes Mock Server, and Fabric8 JUnit5 Extension.&lt;/p&gt; &lt;p&gt;For more information, check out the &lt;a href="https://github.com/fabric8io/kubernetes-client"&gt;Fabric8 Kubernetes Client GitHub&lt;/a&gt; page. Feel free to follow us on these channels:&lt;/p&gt; &lt;ul&gt;&lt;li&gt;&lt;a href="https://stackoverflow.com/questions/tagged/fabric8"&gt;StackOverflow&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://github.com/fabric8io/kubernetes-client/blob/master/doc/CHEATSHEET.md"&gt;Fabric8 Kubernetes Client CHEATSHEET&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://twitter.com/fabric8io"&gt;Twitter&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://gitter.im/fabric8io/kubernetes-client"&gt;Gitter Chat&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; The post &lt;a href="https://developers.redhat.com/articles/2023/01/24/how-generate-code-using-fabric8-kubernetes-client" title="How to generate code using Fabric8 Kubernetes Client"&gt;How to generate code using Fabric8 Kubernetes Client&lt;/a&gt; appeared first on &lt;a href="https://developers.redhat.com/blog" title="Red Hat Developer"&gt;Red Hat Developer&lt;/a&gt;. &lt;br /&gt;&lt;br /&gt;</summary><dc:creator>Rohan Kumar</dc:creator><dc:date>2023-01-24T17:00:00Z</dc:date></entry><entry><title type="html">How to create a Java JMS Client for Artemis</title><link rel="alternate" href="http://www.mastertheboss.com/jboss-frameworks/activemq/how-to-create-a-java-jms-client-for-artemis/" /><author><name>F.Marchioni</name></author><id>http://www.mastertheboss.com/jboss-frameworks/activemq/how-to-create-a-java-jms-client-for-artemis/</id><updated>2023-01-24T14:36:04Z</updated><content type="html">This article will teach you how to write an example Java JMS Client for an Artemis MQ server. We will cover both the configuration of the address in Artemis and a simple Java Client. When working with JMS, destinations such as queues and topics are typically located using JNDI (Java Naming and Directory Interface). The ... The post appeared first on .</content><dc:creator>F.Marchioni</dc:creator></entry><entry><title>How to write tests with Fabric8 Kubernetes Client</title><link rel="alternate" href="https://developers.redhat.com/articles/2023/01/24/how-write-tests-fabric8-kubernetes-client" /><author><name>Rohan Kumar</name></author><id>ea063e82-88de-4a1c-9339-a2822addad27</id><updated>2023-01-24T07:00:00Z</updated><published>2023-01-24T07:00:00Z</published><summary type="html">&lt;p&gt;Like regular applications, it is essential to write tests while building applications that interact with the Kubernetes API server (i.e., Kubernetes Operators). However, it is not always possible to have a Kubernetes test environment available for running tests. Also, our tests may require us to satisfy certain prerequisites (some specific Kubernetes version) in order to run successfully.&lt;/p&gt; &lt;p&gt;In this blog post, we will look at testing libraries made available by &lt;a href="https://github.com/fabric8io/kubernetes-client"&gt;Fabric8 Kubernetes Client&lt;/a&gt; and focus mainly on &lt;a href="https://search.maven.org/artifact/io.fabric8/kubernetes-server-mock/6.3.1/jar"&gt;Fabric8 Kubernetes Mock Server&lt;/a&gt; and &lt;a href="https://search.maven.org/artifact/io.fabric8/kubernetes-junit-jupiter/6.3.1/jar"&gt;Fabric8 JUnit5 Extension&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;This article is the final installment in my series:&lt;/p&gt; &lt;ul&gt;&lt;li&gt;Part 1: &lt;a href="https://developers.redhat.com/articles/2023/01/04/how-use-fabric8-java-client-kubernetes"&gt;How to use Fabric8 Java Client with Kubernetes&lt;/a&gt;&lt;/li&gt; &lt;li&gt;Part 2:  &lt;a href="https://developers.redhat.com/articles/2023/01/04/programming-kubernetes-custom-resources-java"&gt;Programming Kubernetes custom resources in Java&lt;/a&gt;&lt;/li&gt; &lt;li&gt;Part 3: &lt;a href="https://developers.redhat.com/articles/2023/01/05/how-use-fabric8-kubernetes-client#"&gt;How to use Kubernetes dynamic client with Fabric8&lt;/a&gt;&lt;/li&gt; &lt;li&gt;Part 4: &lt;a href="https://developers.redhat.com/articles/2023/01/24/how-generate-code-using-fabric8-kubernetes-client"&gt;How to generate code using Fabric8 Kubernetes Client&lt;/a&gt;&lt;/li&gt; &lt;li&gt;Part 5: How to write tests with Fabric8 Kubernetes Client&lt;/li&gt; &lt;/ul&gt;&lt;h2&gt;How to write tests using Fabric8 Kubernetes Mock Server&lt;/h2&gt; &lt;p&gt;Since it’s not always possible to have a Kubernetes Cluster available for testing while writing tests, most developers try to mock KubernetesClient calls using mocking frameworks like &lt;a href="https://site.mockito.org/"&gt;Mockito&lt;/a&gt; and &lt;a href="https://jmockit.github.io/"&gt;JMockit&lt;/a&gt;. While this can work for most scenarios, overuse of mocking nested KubernetesClient calls can leave tests cluttered with mock calls and decrease readability.&lt;/p&gt; &lt;p&gt;Fabric8 Kubernetes Client provides a &lt;a href="https://search.maven.org/artifact/io.fabric8/kubernetes-server-mock/6.3.1/jar"&gt;Kubernetes Mock Server&lt;/a&gt; that provides spins up a server during testing that looks very much like a real Kubernetes API server. Based on &lt;a href="https://github.com/square/okhttp/tree/master/mockwebserver"&gt;OkHttp’s MockWebServer&lt;/a&gt;, it tries to emulate the Kubernetes API server’s calls for common operations such as get, list, create, watch, etc., which can be common scenarios while testing Kubernetes applications.&lt;/p&gt; &lt;p&gt;In order to use Kubernetes Mock Server, you need to add the following dependency:&lt;/p&gt; &lt;pre&gt; &lt;code class="language-xml"&gt;&lt;dependency&gt; &lt;groupId&gt;io.fabric8&lt;/groupId&gt; &lt;artifactId&gt;kubernetes-server-mock&lt;/artifactId&gt; &lt;version&gt;${fabric8.version}&lt;/version&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;/dependency&gt; &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Once added as a dependency, you can start using Kubernetes Mock Server in your tests. Let’s see how we can get started with using Kubernetes Mock Server in our tests.&lt;/p&gt; &lt;p&gt;If you’re using &lt;a href="https://junit.org/junit4/"&gt;JUnit4&lt;/a&gt;, you can add a &lt;a href="https://junit.org/junit4/javadoc/4.12/org/junit/Rule.html"&gt;JUnit Rule&lt;/a&gt; for Kubernetes Mock Server in your test as follows:&lt;/p&gt; &lt;pre&gt; &lt;code class="language-java"&gt;import io.fabric8.kubernetes.client.server.mock.KubernetesServer; public class Foo { @Rule public KubernetesServer crudServer = new KubernetesServer(true, true); // … } &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;There are two configurable arguments when initializing Kubernetes Mock Server:&lt;/p&gt; &lt;ol&gt;&lt;li&gt;&lt;strong&gt;Crud:&lt;/strong&gt; Enable Opinionated Kubernetes mock server, where users don’t need to provide expectations for their operations (defaults to false). &lt;/li&gt; &lt;li&gt;&lt;strong&gt;Https:&lt;/strong&gt; Use HTTPS or not (defaults to true).&lt;/li&gt; &lt;/ol&gt;&lt;p&gt;If you’re using &lt;a href="https://junit.org/junit5/"&gt;JUnit5&lt;/a&gt;, you can use the following  @EnableKubernetesMockClient annotation:&lt;/p&gt; &lt;pre&gt; &lt;code class="language-java"&gt;import io.fabric8.kubernetes.client.server.mock.EnableKubernetesMockClient; @EnableKubernetesMockClient class Foo { private KubernetesClient kubernetesClient; private KubernetesMockServer server; // .. } &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;You can use Kubernetes Mock Server in two modes:&lt;/p&gt; &lt;ol&gt;&lt;li&gt;&lt;strong&gt;CRUD Mode&lt;/strong&gt;: Opinionated Kubernetes Mock Server acts very similar to a real Kubernetes API Server and processes common operations such as get, create, watch, etc.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Expectations Mode:&lt;/strong&gt; The user defines expectations for Kubernetes Mock Server for API endpoints expected to hit during test execution and defines response elements.&lt;/li&gt; &lt;/ol&gt;&lt;p&gt;I will explain both modes with the help of an example.&lt;/p&gt; &lt;p&gt;Consider an elementary class PodGroupService that manages a group of pods in the currently logged namespace sharing some labels. &lt;/p&gt; &lt;p&gt;Refer to my Kubernetes Client demo &lt;a href="https://github.com/rohanKanojia/kubernetes-client-demo/blob/master/writing-tests-with-fabric8/src/main/java/io/fabric8/demos/tests/mockserver/PodGroupService.java#L23"&gt;PodGroupService.java&lt;/a&gt;.&lt;/p&gt; &lt;pre&gt; &lt;code class="language-java"&gt;package io.fabric8.demos.tests.mockserver; import io.fabric8.kubernetes.client.KubernetesClient; import java.util.Map; public class PodGroupService { private final KubernetesClient kubernetesClient; private final Map&lt;String, String&gt; matchLabels; public PodGroupService(KubernetesClient client, Map&lt;String, String&gt; matchLabels) { this.kubernetesClient = client; this.matchLabels = matchLabels; } public PodList list() { return kubernetesClient.pods().withLabels(matchLabels).list(); } public int size() { return list().getItems().size(); } // Rest of methods } &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Next, let’s try to write a test for this size method using Kubernetes Mock Server using both modes.&lt;/p&gt; &lt;h3&gt;CRUD mode&lt;/h3&gt; &lt;p&gt;In CRUD mode, you don’t need to set any expectations. You need to use KubernetesClient assuming a real Kubernetes API server is running in the background. You can see it’s quite transparent and readable:&lt;/p&gt; &lt;p&gt;Refer to &lt;a href="https://github.com/rohanKanojia/kubernetes-client-demo/blob/master/writing-tests-with-fabric8/src/test/java/io/fabric8/demos/tests/mockserver/PodGroupServiceCrudTest.java#L58"&gt;PodGroupServiceCrudTest.java&lt;/a&gt;.&lt;/p&gt; &lt;pre&gt; &lt;code class="language-java"&gt;package io.fabric8.demos.tests.mockserver; import io.fabric8.kubernetes.api.model.PodBuilder; import io.fabric8.kubernetes.client.KubernetesClient; import io.fabric8.kubernetes.client.server.mock.EnableKubernetesMockClient; import io.fabric8.kubernetes.client.server.mock.KubernetesMockServer; import org.junit.jupiter.api.Test; import java.util.Collections; import static org.junit.jupiter.api.Assertions.assertEquals; @EnableKubernetesMockClient(crud = true) class PodGroupServiceCrudTest { private KubernetesClient kubernetesClient; private KubernetesMockServer server; @Test void size_whenPodsWithLabelPresent_thenReturnCount() { // Given Map&lt;String, String&gt; matchLabel = Collections.singletonMap("foo", "bar"); kubernetesClient.pods().resource(createNewPod("p1", matchLabel)).create(); PodGroupService podGroupService = new PodGroupService(kubernetesClient, matchLabel); // When int count = podGroupService.size(); // Then assertEquals(1, count); } } &lt;/code&gt;&lt;/pre&gt; &lt;h3&gt;Expectations mode&lt;/h3&gt; &lt;p&gt;While in Expectations mode, we need to set up expectations for the behavior we want when a certain Kubernetes resource endpoint the KubernetesClient requests:&lt;/p&gt; &lt;p&gt;Refer to the &lt;a href="https://github.com/rohanKanojia/kubernetes-client-demo/blob/master/writing-tests-with-fabric8/src/test/java/io/fabric8/demos/tests/mockserver/PodGroupServiceTest.java#L74"&gt;PodGroupServiceTest.java&lt;/a&gt;.&lt;/p&gt; &lt;pre&gt; &lt;code class="language-java"&gt;package io.fabric8.demos.tests.mockserver; import io.fabric8.kubernetes.api.model.PodBuilder; import io.fabric8.kubernetes.api.model.PodListBuilder; import io.fabric8.kubernetes.client.KubernetesClient; import io.fabric8.kubernetes.client.server.mock.EnableKubernetesMockClient; import io.fabric8.kubernetes.client.server.mock.KubernetesMockServer; import org.junit.jupiter.api.Test; import java.util.Collections; import static java.net.HttpURLConnection.HTTP_OK; import static org.junit.jupiter.api.Assertions.assertEquals; @EnableKubernetesMockClient class PodGroupServiceTest { private KubernetesClient kubernetesClient; private KubernetesMockServer server; @Test void size_whenPodsWithLabelPresent_thenReturnCount() { // Given server.expect().get() .withPath("/api/v1/namespaces/test/pods?labelSelector=foo%3Dbar") .andReturn(HTTP_OK, new PodListBuilder().addToItems( new PodBuilder() .withNewMetadata() .withName("pod1") .addToLabels("foo", "bar") .endMetadata() .build()) .build()) .once(); PodGroupService podGroupService = new PodGroupService(kubernetesClient, Collections.singletonMap("foo", "bar")); // When int count = podGroupService.size(); // Then assertEquals(1, count); } } &lt;/code&gt;&lt;/pre&gt; &lt;h2&gt;Writing tests against real Kubernetes clusters&lt;/h2&gt; &lt;p&gt;Apart from Kubernetes Mock Server, Fabric8 Kubernetes Client provides a set of JUnit5 extension annotations that can simplify writing tests against a real Kubernetes Cluster.&lt;/p&gt; &lt;p&gt;To use these JUnit5 annotations, you need to add this dependency:&lt;/p&gt; &lt;pre&gt; &lt;code class="language-xml"&gt;&lt;dependency&gt; &lt;groupId&gt;io.fabric8&lt;/groupId&gt; &lt;artifactId&gt;kubernetes-junit-jupiter&lt;/artifactId&gt; &lt;version&gt;${fabric8.version}&lt;/version&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;/dependency&gt; &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The following table lists the annotations provided by this dependency:&lt;/p&gt; &lt;div&gt; &lt;table border="1" cellpadding="1" cellspacing="1" width="624"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt; &lt;p&gt;&lt;strong&gt;Name&lt;/strong&gt;&lt;/p&gt; &lt;/td&gt; &lt;td&gt; &lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/p&gt; &lt;/td&gt; &lt;/tr&gt;&lt;tr&gt;&lt;td&gt; &lt;p&gt;&lt;code&gt;@KubernetesTest&lt;/code&gt;&lt;/p&gt; &lt;/td&gt; &lt;td&gt; &lt;p&gt;Creates a temporary test namespace and configures a KubernetesClient instance in the test class to use in the tests.&lt;br /&gt;&lt;br /&gt; See &lt;a href="https://github.com/rohanKanojia/kubernetes-client-demo/blob/master/writing-tests-with-fabric8/src/test/java/io/fabric8/demos/tests/e2e/PodGroupServiceIT.java#L28"&gt;example&lt;/a&gt;.&lt;/p&gt; &lt;/td&gt; &lt;/tr&gt;&lt;tr&gt;&lt;td&gt; &lt;p&gt;&lt;code&gt;@LoadKubernetesManifests&lt;/code&gt;&lt;/p&gt; &lt;/td&gt; &lt;td&gt; &lt;p&gt;Apply a YAML file to set up the environment before test execution.&lt;/p&gt; &lt;p&gt;See &lt;a href="https://github.com/fabric8io/kubernetes-client/blob/master/kubernetes-itests/src/test/java/io/fabric8/kubernetes/ConfigMapIT.java#L31"&gt;example&lt;/a&gt;.&lt;/p&gt; &lt;/td&gt; &lt;/tr&gt;&lt;tr&gt;&lt;td&gt; &lt;p&gt;&lt;code&gt;@RequireK8sSupport&lt;/code&gt;&lt;/p&gt; &lt;/td&gt; &lt;td&gt; &lt;p&gt;Only execute the test when a specific Kubernetes resource is present in the Kubernetes cluster before test execution. It’s quite helpful in the case of custom resources.&lt;/p&gt; &lt;p&gt;See &lt;a href="https://github.com/fabric8io/kubernetes-client/blob/master/kubernetes-itests/src/test/java/io/fabric8/kubernetes/PodEvictIT.java#L38"&gt;example&lt;/a&gt;.&lt;/p&gt; &lt;/td&gt; &lt;/tr&gt;&lt;tr&gt;&lt;td&gt; &lt;p&gt;&lt;code&gt;@RequireK8sVersionAtLeast&lt;/code&gt;&lt;/p&gt; &lt;/td&gt; &lt;td&gt; &lt;p&gt;Only execute test when Kubernetes version is at least specified version.&lt;/p&gt; &lt;p&gt;See &lt;a href="https://github.com/fabric8io/kubernetes-client/blob/master/kubernetes-itests/src/test/java/io/fabric8/kubernetes/DryRunIT.java#L32"&gt;example&lt;/a&gt;.&lt;/p&gt; &lt;/td&gt; &lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt; &lt;p&gt; &lt;/p&gt; &lt;p&gt;Now let’s come back to our PodGroupService example and try to write an end-to-end test for the &lt;code&gt;size()&lt;/code&gt; method. You can see it’s very similar to the test we wrote for Kubernetes Mock Server in CRUD mode, but here we’re using the JUnit5 annotations: &lt;a href="https://github.com/rohanKanojia/kubernetes-client-demo/blob/master/writing-tests-with-fabric8/src/test/java/io/fabric8/demos/tests/e2e/PodGroupServiceIT.java#L75"&gt;PodGroupServiceIT.java&lt;/a&gt;.&lt;/p&gt; &lt;pre&gt; &lt;code class="language-java"&gt;package io.fabric8.demos.tests.e2e; // … import io.fabric8.junit.jupiter.api.KubernetesTest; import io.fabric8.junit.jupiter.api.RequireK8sSupport; import io.fabric8.junit.jupiter.api.RequireK8sVersionAtLeast; @KubernetesTest @RequireK8sSupport(Pod.class) @RequireK8sVersionAtLeast(majorVersion = 1, minorVersion = 16) class PodGroupServiceIT { KubernetesClient kubernetesClient; @Test void size_whenPodsPresent_thenReturnActualSize() { // Given PodGroupService podGroupService = new PodGroupService(kubernetesClient, Collections.singletonMap("app", "size-non-zero")); podGroupService.addToGroup(createNewPod("p1", "size-non-zero")); podGroupService.addToGroup(createNewPod("p2", "size-non-zero")); // When int result = podGroupService.size(); // Then assertEquals(2, result); } } &lt;/code&gt;&lt;/pre&gt; &lt;h2&gt;Fabric8 Kubernetes series wrap-up&lt;/h2&gt; &lt;p&gt;This concludes my series on Fabric8 Kubernetes Java for developers. This article demonstrated how to write unit and end-to-end tests using testing libraries provided by Fabric8 Kubernetes Client. You can find the code in this &lt;a href="https://github.com/rohanKanojia/kubernetes-client-demo/tree/master/writing-tests-with-fabric8"&gt;GitHub repository&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;For more information, check out the &lt;a href="https://github.com/fabric8io/kubernetes-client"&gt;Fabric8 Kubernetes Client GitHub&lt;/a&gt; page. Feel free to follow us on these channels:&lt;/p&gt; &lt;ul&gt;&lt;li&gt;&lt;a href="https://stackoverflow.com/questions/tagged/fabric8"&gt;StackOverflow&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://github.com/fabric8io/kubernetes-client/blob/master/doc/CHEATSHEET.md"&gt;Fabric8 Kubernetes Client CHEATSHEET&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://twitter.com/fabric8io"&gt;Twitter&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://gitter.im/fabric8io/kubernetes-client"&gt;Gitter Chat&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; The post &lt;a href="https://developers.redhat.com/articles/2023/01/24/how-write-tests-fabric8-kubernetes-client" title="How to write tests with Fabric8 Kubernetes Client"&gt;How to write tests with Fabric8 Kubernetes Client&lt;/a&gt; appeared first on &lt;a href="https://developers.redhat.com/blog" title="Red Hat Developer"&gt;Red Hat Developer&lt;/a&gt;. &lt;br /&gt;&lt;br /&gt;</summary><dc:creator>Rohan Kumar</dc:creator><dc:date>2023-01-24T07:00:00Z</dc:date></entry><entry><title type="html">Deploying Dashbuilder Dashboards</title><link rel="alternate" href="https://blog.kie.org/2023/01/deploying-dashbuilder-dashboards.html" /><author><name>William Siqueira</name></author><id>https://blog.kie.org/2023/01/deploying-dashbuilder-dashboards.html</id><updated>2023-01-23T13:50:24Z</updated><content type="html">files are plain YAML which makes it easy to author dashboards using the . The next natural step is to publish this dashboard for public access and this is what we cover in this article! Image Generated usign DALLE-2 WHAT IS DASHBUILDER AFTER ALL? Dashbuilder is a web application that can run dashboards in different modes: EDITOR: In this mode Dashbuilder receives the content dynamically and renders it. It is used embedded in editors; CLIENT: This is the mode that should be used for deployment. Basically you provide your YAML files and configure the path to it in file setup.js. If you map multiple YAML files then Dashbuilder will prompt users to select a dashboard. In Client mode the requirement is to have the dashbuilder static bundle, which is inside the package. But how do you make it available? Let’s explore some alternatives! Deploying to Openshift It is possible to easily deploy to Openshift using the following articles written by my colleagues: * : In this article shows how to create a static web content container image and deploy to OpenShift Sandbox; * : A new feature allows you to run Serverless Logic Web Tools dashboards directly into  Openshift. This feature is described in this article by my colleague DASHBUILDER NPM PROJECT For using NPM with Dashbuilder you need to create a new npm project, then add the dependency “@kie-tools/dashbuilder-client”: npm init npm i @kie-tools/dashbuilder-client npm install The dashbuilder bundle will be available in node_modules/@kie-tools/dashbuilder-client/dist/. You can use scripts or webpack to build the final bundle that should include your setup.js and the YAML files. Here’s a sample package.json {  "name": "dashbuilder-webapp",  "version": "0.0.0",  "description": "Dashbuilder WebApp",  "scripts": {    "bootstrap": "npm install",    "clean": "rm -rf dist/",    "copy:dashbuilder": "cp -r node_modules/@kie-tools/dashbuilder-client/dist/* dist/",    "copy:sources": "cp -r static/* dist",    "build": "npm run clean &amp;amp;&amp; mkdir dist/ &amp;amp;&amp; npm run copy:dashbuilder &amp;amp;&amp; npm run copy:sources",    "server": "npm run build &amp;amp;&amp; cd dist &amp;amp;&amp; http-server -p 8000"  },  "devDependencies": {    "@kie-tools/dashbuilder-client": "^0.26.0",    "http-server": "^14.1.1"  } } Using the package.json from above will allow you to run the following commands: * npm run bootstrap: Inits the project * npm run build: Builds the webapp, which will be available in dist directory; * npm run server: Runs an HTTP server on port 8000 so you can visualize your dashboards The static content from dist  is ready to be deployed in some web server. Let’s explore how to do it with Github Pages. USING GITHUBPAGES To deploy to Github Pages, you need to build the project from the last step and commit the dist content to a Github repository with a branch called gh-pages. Your dashboards will be available in username}.github.io/{repository name} Here’s a template project so you can get started: To use the template above just click on button “Use this template” (make sure to mark “Include all branches”). Then you can either edit the files and push changes to Github and the project will be automatically built and available in username}.github.io/{repository name}.  To use a rich YAML editor you can use : * Setup Your github token following the website instructions; * Import the project; * Edit the files you want and send the changes back to github * Wait a few minutes and the changes will be in your github pages You can see these steps also in the video below The post appeared first on .</content><dc:creator>William Siqueira</dc:creator></entry><entry><title>Cheers to 10 years of the Red Hat Developer blog</title><link rel="alternate" href="https://developers.redhat.com/articles/2023/01/23/cheers-10-years-red-hat-developer-blog" /><author><name>Mike Guerette</name></author><id>eda87047-189e-44e2-ab25-02f96113610f</id><updated>2023-01-23T07:00:00Z</updated><published>2023-01-23T07:00:00Z</published><summary type="html">&lt;p&gt;I was excited and amazed to learn that the Red Hat Developer blog is celebrating its tenth anniversary this month. It's come so far, but let me share how it all started.&lt;/p&gt; &lt;h2&gt;The prequel&lt;/h2&gt; &lt;p&gt;In 2012, there were plenty of Red Hat-sponsored blogs for community projects, but nothing that covered our products from an &lt;a href="https://developers.redhat.com/app-dev-platform"&gt;application development&lt;/a&gt; perspective. So management came to me and said, “Hey Mike, we need a developer blog. We know you've never done one before, but have at it.”&lt;/p&gt; &lt;h2&gt;Chapter 1&lt;/h2&gt; &lt;p&gt;The good news was that I knew what a blog was (and could even spell it). Fortunately, &lt;a href="https://www.linkedin.com/in/kimberlycraven/"&gt;Kimberly Craven&lt;/a&gt; had just joined Red Hat and was able to get the new blog set up. From there, the challenge was finding good content—and a lot of it.&lt;/p&gt; &lt;p&gt;Around the same time, &lt;a href="https://www.linkedin.com/in/1angdon/"&gt;Langdon White&lt;/a&gt; (who's now a Boston University lecturer) joined Red Hat and started writing articles while I recruited 28 other Red Hatters to contribute. The &lt;a href="https://developers.redhat.com/blog/2013/01/21/welcome-to-the-red-hat-developer-blog"&gt;very first article&lt;/a&gt; was published on January 21, 2013, followed by another 90 or so that first year.&lt;/p&gt; &lt;p&gt;I'd like to say it was my great selling skills that persuaded so many people to write a blog that first year—but it was probably the free hoodie that closed the deal. A free Red Hat jacket also helped motivate new contributors to publish three articles. I still have the jacket and the hoodie with this on the back:&lt;/p&gt; &lt;figure class="rhd-u-has-filter-caption" role="group"&gt;&lt;div class="rhd-c-figure"&gt; &lt;article class="media media--type-image media--view-mode-article-content"&gt;&lt;div class="field field--name-image field--type-image field--label-hidden field__items"&gt; &lt;a href="https://developers.redhat.com/sites/default/files/image1.jpg" data-featherlight="image"&gt;&lt;img loading="lazy" src="https://developers.redhat.com/sites/default/files/styles/article_floated/public/image1.jpg?itok=9dlawUrp" width="600" height="450" alt="A jacket with text on the back: "Up for some geekspeak? Meet me at developerblog.redhat.com."" typeof="Image" /&gt;&lt;/a&gt; &lt;/div&gt; &lt;/article&gt;&lt;/div&gt; &lt;figcaption class="rhd-c-caption"&gt;The swag that helped attract new contributors back in 2013.&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;A bit cheesy at the time, but it was voted on by the contributors. (Lesson learned: Some things should be left to professionals).&lt;/p&gt; &lt;h2&gt;Chapter 2&lt;/h2&gt; &lt;p&gt;Year 2 began with an excellent base of contributors who were now wearing “stylish” Red Hat outerwear. Then peer pressure took over: Those contributors' teammates, desiring to be part of the in-crowd with cool wardrobes, joined in with submissions of their own. Content and readership grew. Rinse and repeat.&lt;/p&gt; &lt;h2&gt;Chapter 10&lt;/h2&gt; &lt;p&gt;Fast forward over ten years, hot industry topics came to feed our content backlog: &lt;a href="https://developers.redhat.com/topics/openshift"&gt;OpenShift&lt;/a&gt;, &lt;a href="https://developers.redhat.com/topics/kubernetes"&gt;Kubernetes&lt;/a&gt;, &lt;a href="https://developers.redhat.com/topics/containers/"&gt;containers&lt;/a&gt;, &lt;a href="https://developers.redhat.com/topics/microservices/"&gt;microservices&lt;/a&gt;, &lt;a href="https://developers.redhat.com/node/219015"&gt;Quarkus&lt;/a&gt;, &lt;a href="https://developers.redhat.com/node/222775"&gt;RHEL 8 and 9&lt;/a&gt;, and &lt;a href="developers.redhat.com/topics"&gt;a whole lot more&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Today, the Red Hat Developer blog is managed by professional editors. The site continues to deliver great development-related content, including &lt;a href="https://developers.redhat.com/developer-sandbox/activities"&gt;Developer Sandbox activities&lt;/a&gt;, &lt;a href="https://developers.redhat.com/devnation"&gt;tech talks and events&lt;/a&gt;, &lt;a href="https://developers.redhat.com/learn"&gt;learning paths&lt;/a&gt;, &lt;a href="https://developers.redhat.com/e-books"&gt;e-books&lt;/a&gt;, and &lt;a href="https://developers.redhat.com/cheat-sheets"&gt;cheat sheets&lt;/a&gt;.&lt;/p&gt; &lt;h2&gt;Mike's top picks&lt;/h2&gt; &lt;p&gt;Looking back, here are my top five picks from the past decade:&lt;/p&gt; &lt;ul&gt;&lt;li&gt;&lt;strong&gt;Biggest surprise:&lt;/strong&gt; &lt;a href="https://developers.redhat.com/blog/2015/01/02/improving-math-performance-in-glibc"&gt;Improving math performance in glibc&lt;/a&gt;. I just needed something to fill space on a Friday, but this became big on Hacker News, bringing in 20,000 views over the weekend.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Best that was my idea:&lt;/strong&gt; &lt;a href="https://developers.redhat.com/blog/2018/08/13/install-python3-rhel"&gt;How to install Python 3 on RHEL&lt;/a&gt;. Good thing Rob Terzi was around to write it.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Best by a rookie (and #1 overall): &lt;/strong&gt;&lt;a href="https://developers.redhat.com/blog/2014/08/14/find-fix-memory-leaks-java-application"&gt;How to find and fix memory leaks in your Java application&lt;/a&gt;. At the time, Leo was a Red Hat intern.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;A list that fulfilled all expectations:&lt;/strong&gt; &lt;a href="https://developers.redhat.com/blog/2016/02/24/10-things-to-avoid-in-docker-containers"&gt;10 things to avoid in Docker containers&lt;/a&gt; by Rafael Benevides.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Best ghostwritten by me:&lt;/strong&gt; &lt;a href="https://developers.redhat.com/blog/2016/03/31/no-cost-rhel-developer-subscription-now-available"&gt;No-Cost RHEL Developer Subscription now available&lt;/a&gt;. This was an important new item for Red Hat.&lt;/li&gt; &lt;/ul&gt;&lt;p&gt;Congrats and thanks to the authors, who have earned their bragging rights.&lt;/p&gt; &lt;h2&gt;Epilogue&lt;/h2&gt; &lt;p&gt;I ran the Red Hat Developer blog for the first three or four years, and then I ran it again for a couple of more later on. So, I guess I reared this child for about half its life. It appears that &lt;a href="https://developers.redhat.com/authors/mike-guerette/"&gt;this is my 305th article for the site&lt;/a&gt;, and I hope you've benefited from some of them.&lt;/p&gt; &lt;p&gt;Many thanks to the hundreds of Red Hat Developer contributors over these ten years, as well as the millions of readers.&lt;/p&gt; &lt;p&gt;Happy reading.&lt;/p&gt; &lt;p&gt;Mike out&lt;/p&gt; The post &lt;a href="https://developers.redhat.com/articles/2023/01/23/cheers-10-years-red-hat-developer-blog" title="Cheers to 10 years of the Red Hat Developer blog"&gt;Cheers to 10 years of the Red Hat Developer blog&lt;/a&gt; appeared first on &lt;a href="https://developers.redhat.com/blog" title="Red Hat Developer"&gt;Red Hat Developer&lt;/a&gt;. &lt;br /&gt;&lt;br /&gt;</summary><dc:creator>Mike Guerette</dc:creator><dc:date>2023-01-23T07:00:00Z</dc:date></entry><entry><title>Quarkus 3.0.0.Alpha3 released - Third iteration of our Jakarta EE 10 stream</title><link rel="alternate" href="&#xA;                https://quarkus.io/blog/quarkus-3-0-0-alpha3-released/&#xA;            " /><author><name>Guillaume Smet (https://twitter.com/gsmet_)</name></author><id>https://quarkus.io/blog/quarkus-3-0-0-alpha3-released/</id><updated>2023-01-23T00:00:00Z</updated><published>2023-01-23T00:00:00Z</published><summary type="html">As you might know by now, we started a Quarkus 3.0 effort last year and we are continuing this effort, which was described here, here, here, and here. Quarkus 3.0.0.Alpha3 is the third iteration of this work. On the Jakarta EE 10 front, it doesn’t bring anything new, except for...</summary><dc:creator>Guillaume Smet (https://twitter.com/gsmet_)</dc:creator><dc:date>2023-01-23T00:00:00Z</dc:date></entry><entry><title type="html">Comparing Jackson vs JSONB</title><link rel="alternate" href="http://www.mastertheboss.com/java-ee/json/comparing-jackson-vs-jsonb/" /><author><name>F.Marchioni</name></author><id>http://www.mastertheboss.com/java-ee/json/comparing-jackson-vs-jsonb/</id><updated>2023-01-22T19:06:02Z</updated><content type="html">JSON-B and Jackson are both libraries that can be used for parsing and generating JSON data in Java. However, they have some differences in their functionality and usage. This tutorial will discuss them in detail. Jackson and JSON-B in a nutshell Firstly, if you are new to JSON parsing, let’s give an overview to these ... The post appeared first on .</content><dc:creator>F.Marchioni</dc:creator></entry><entry><title type="html">Apache Kafka Landscape</title><link rel="alternate" href="http://www.ofbizian.com/2023/01/apache-kafka-landscape.html" /><author><name>Unknown</name></author><id>http://www.ofbizian.com/2023/01/apache-kafka-landscape.html</id><updated>2023-01-20T08:33:00Z</updated><content type="html">* ACTIVE APACHE KAFKA PROJECTS LIST:  * SELF-SERVICE FORM TO ADD A PROJECT:  Before joining to work on the project, I was a product manager at Red Hat. At Red Hat, I had the opportunity to with with exceptional teams on projects such as Debezium, Data Virtualization, Apicurio, Apache Camel, and Strimzi, and helped build Red Hat's . Kafka is more than just a fast message broker, it is a comprehensive ecosystem of various complementary management and development tools and managed services. Through my learning, , and exploration of the vast , I compiled a list of over 120 active Kafka projects I encountered. Here is a sneak peek some of these projects, with the full data set available in the provided . Apache Kafka landscape projects The projects are organized into main categories of the Kafka ecosystem, including Kafka distributions, stream processors, client libraries, connectors, schema registry, replicator, rest proxy, and management tools. Each project includes information on its license, programming language, and deployment types. Additionally, statistics such as GitHub stars or downloads are provided too, but it should be noted that these might have become outdated. A simple report generated from the list is available for reference. Apache Kafka project stats Discovering other active projects within the Apache Kafka ecosystem can be time-consuming. However, the data provided here is available for you to explore and use as you desire, saving you time and effort. If you wish to add any additional projects, tools, or services related to Apache Kafka, use the provided . If you found this content useful, share and help spread this list to others in the Kafka universe. I hope to see you at this year. If my talk is accepted 🤞, I will be discussing the topic of creating "Polyglot Microservices with Dapr and Kafka" in more detail.</content><dc:creator>Unknown</dc:creator></entry><entry><title type="html">H2 Database Tutorial and expert Tips</title><link rel="alternate" href="http://www.mastertheboss.com/jbossas/jboss-datasource/h2-database-tutorial/" /><author><name>F.Marchioni</name></author><id>http://www.mastertheboss.com/jbossas/jboss-datasource/h2-database-tutorial/</id><updated>2023-01-20T07:46:35Z</updated><content type="html">H2 DB is an open source lightweight Database written in Java. It ships in JBoss EAP and WildFly application server to speed up developing and testing Java applications. Let’s have a look to the main configuration options and how to create an example application using the H2 DB. What is H2 database? Firstly, let’s see ... The post appeared first on .</content><dc:creator>F.Marchioni</dc:creator></entry><entry><title type="html">Getting started with Quarkus 3</title><link rel="alternate" href="http://www.mastertheboss.com/soa-cloud/quarkus/getting-started-with-quarkus-3/" /><author><name>F.Marchioni</name></author><id>http://www.mastertheboss.com/soa-cloud/quarkus/getting-started-with-quarkus-3/</id><updated>2023-01-19T12:47:00Z</updated><content type="html">This article introduces some of the new features of the upcoming Quarkus 3 release which is, at the time of writing, in Alpha state. We will cover the main highlights and some tools you can use to upgrade existing Quarkus applications. Quarkus 3 highlights Firstly, let’s discuss Quarkus 3 main highlights: An example Quarkus 3 ... The post appeared first on .</content><dc:creator>F.Marchioni</dc:creator></entry></feed>
